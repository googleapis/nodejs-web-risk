// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
} from 'google-gax';
import * as path from 'path';

import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './web_risk_service_v1_beta1_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Web Risk v1beta1 API defines an interface to detect malicious URLs on your
 *  website and in client applications.
 * @class
 * @memberof v1beta1
 */
export class WebRiskServiceV1Beta1Client {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _terminated = false;
  auth: gax.GoogleAuth;
  webRiskServiceV1Beta1Stub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WebRiskServiceV1Beta1Client.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this
      .constructor as typeof WebRiskServiceV1Beta1Client;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this
      .constructor as typeof WebRiskServiceV1Beta1Client).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.cloud.webrisk.v1beta1.WebRiskServiceV1Beta1',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.webrisk.v1beta1.WebRiskServiceV1Beta1.
    this.webRiskServiceV1Beta1Stub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.cloud.webrisk.v1beta1.WebRiskServiceV1Beta1'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.cloud.webrisk.v1beta1.WebRiskServiceV1Beta1,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const webRiskServiceV1Beta1StubMethods = [
      'computeThreatListDiff',
      'searchUris',
      'searchHashes',
    ];

    for (const methodName of webRiskServiceV1Beta1StubMethods) {
      const innerCallPromise = this.webRiskServiceV1Beta1Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'webrisk.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'webrisk.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  computeThreatListDiff(
    request: protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffResponse,
      (
        | protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  computeThreatListDiff(
    request: protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffResponse,
      | protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the most recent threat list diffs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.webrisk.v1beta1.ThreatType} request.threatType
   *   The ThreatList to update.
   * @param {Buffer} request.versionToken
   *   The current version token of the client for the requested list (the
   *   client version that was received from the last successful diff).
   * @param {google.cloud.webrisk.v1beta1.ComputeThreatListDiffRequest.Constraints} request.constraints
   *   Required. The constraints associated with this request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ComputeThreatListDiffResponse]{@link google.cloud.webrisk.v1beta1.ComputeThreatListDiffResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  computeThreatListDiff(
    request: protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffResponse,
          | protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffResponse,
      | protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffResponse,
      (
        | protosTypes.google.cloud.webrisk.v1beta1.IComputeThreatListDiffRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.computeThreatListDiff(
      request,
      options,
      callback
    );
  }
  searchUris(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest | undefined,
      {} | undefined
    ]
  >;
  searchUris(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * This method is used to check whether a URI is on a given threatList.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.uri
   *   Required. The URI to be checked for matches.
   * @param {number[]} request.threatTypes
   *   Required. The ThreatLists to search in.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SearchUrisResponse]{@link google.cloud.webrisk.v1beta1.SearchUrisResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchUris(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisResponse,
          | protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchUrisRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.searchUris(request, options, callback);
  }
  searchHashes(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest | undefined,
      {} | undefined
    ]
  >;
  searchHashes(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Gets the full hashes that match the requested hash prefix.
   * This is used after a hash prefix is looked up in a threatList
   * and there is a match. The client side threatList only holds partial hashes
   * so the client must query this method to determine if there is a full
   * hash match of a threat.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {Buffer} request.hashPrefix
   *   A hash prefix, consisting of the most significant 4-32 bytes of a SHA256
   *   hash. For JSON requests, this field is base64-encoded.
   * @param {number[]} request.threatTypes
   *   Required. The ThreatLists to search in.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SearchHashesResponse]{@link google.cloud.webrisk.v1beta1.SearchHashesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchHashes(
    request: protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesResponse,
          | protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesResponse,
      protosTypes.google.cloud.webrisk.v1beta1.ISearchHashesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.searchHashes(request, options, callback);
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.webRiskServiceV1Beta1Stub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
